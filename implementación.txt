implementación  nivel Principiante

nivel 1 ->
class Player
  def play_turn(warrior)
    # caminar hacia adelante
    warrior.walk!
  end
end

nivel 2 ->
class Player
  def play_turn(warrior)
    # si no encuentra nada enfrente, sigue caminando
    if warrior.feel.empty?
    	warrior.walk!
    # de lo contrario ataca
    else
    	warrior.attack!
    end
  end
end

nivel 3 ->
class Player
  def play_turn(warrior)
  	
	# si no encuentra nada enfrente, sigue caminando
    if warrior.feel.empty? 
    	#si la sangre esta llena, camina
    	if warrior.health == 20
    		warrior.walk!
    	else
    		#sino recuperamos vida por 2 puntos
    		warrior.rest!
    	end
    # de lo contrario ataca
    else
    	warrior.attack!
    end
	
  end
end

nivel 4 ->
class Player

  def initialize
    @health = 20  
  end

  def play_turn(warrior)
  
	# si encuentra a un enemigo lo ataca
    if warrior.feel.enemy? 
    	warrior.attack!
    else
    	#sino somos atacados y estamos dañado, se recupera la sangre
    	if !isAttacked(warrior) and warrior.health < 20
    		warrior.rest!
    	else
    		warrior.walk!
    	end
    	#guardamos la sangre restante
	@health = warrior.health
    end
  end

  #metodo para saber si somos atacados
  def isAttacked(warrior)
  	warrior.health < @health
  end

end

nivel 5 ->
class Player

  def initialize
    @health = 20  
  end

  def play_turn(warrior)
  	#si encuentra un cautivo lo rescata
 	if warrior.feel.captive? 
    	warrior.rescue!
  	elsif
    	#sino somos atacados y estamos dañado, se recupera la sangre
    	if !isAttacked(warrior) and warrior.health < 20
    		warrior.rest!
    	# si encuentra a un enemigo lo ataca
	  	elsif warrior.feel.enemy?
	  		warrior.attack!
	  	else
    		warrior.walk!
    	end
    	#guardamos la sangre restante
	@health = warrior.health
    end
  end

  #metodo para saber si somos atacados
  def isAttacked(warrior)
  	warrior.health < @health
  end

end

nivel 6 ->
class Player

  def initialize
    @health = 20  
    @dir = :backward
    @rescued = 0
  end

  def play_turn(warrior)
  	puts "rescatados: #{@rescued}"
  	#si encuentra un cautivo lo rescata
 	if warrior.feel(@dir).captive? 
    	warrior.rescue!(@dir)
    	#sumamos los rescatados y cambiamos la direccion hacia adelante
    	@rescued += 1
    	@dir = :forward
  	elsif
    	#sino somos atacados y estamos dañado, se recupera la sangre
    	if !isAttacked(warrior) and warrior.health < 20
    		warrior.rest!
    	# si encuentra a un enemigo lo ataca
	  	elsif warrior.feel(@dir).enemy?
	  		warrior.attack!(@dir)
	  	else
	  		#si la sangre baja a la mitad, caminamos hacia atras para regenerarla
	  		if warrior.health <= 10
	  			warrior.walk!(:backward)
	  		else
    			warrior.walk!(@dir)
    		end
    	end
    	#guardamos la sangre restante
	@health = warrior.health
    end
  end

  #metodo para saber si somos atacados
  def isAttacked(warrior)
  	warrior.health < @health
  end

end


nivel 7 ->
class Player

  def initialize
    @health = 20  
    @dir = :forward
    @rescued = 0
  end

  def play_turn(warrior)
  	puts "rescatados: #{@rescued}"

  	#si topamos con pared, cambiamos direccion
  	if warrior.feel.wall?
  		warrior.pivot!(:left)
  	#si encuentra un cautivo lo rescata
 	elsif warrior.feel(@dir).captive? 
    	warrior.rescue!(@dir)
    	#sumamos los rescatados y cambiamos la direccion hacia adelante
    	@rescued += 1
    	@dir = :forward
  	elsif
    	#sino somos atacados y estamos dañado, se recupera la sangre
    	if !isAttacked(warrior) and warrior.health < 20
    		warrior.rest!
    	# si encuentra a un enemigo lo ataca
	  	elsif warrior.feel(@dir).enemy?
	  		warrior.attack!(@dir)
	  	else
	  		#si la sangre baja a la mitad, caminamos hacia atras para regenerarla
	  		if warrior.health <= 10
	  			warrior.walk!(:backward)
	  		else
    			warrior.walk!(@dir)
    		end
    	end
    	#guardamos la sangre restante
	@health = warrior.health
    end
  end

  #metodo para saber si somos atacados
  def isAttacked(warrior)
  	warrior.health < @health
  end

end

nivel 8 ->
class Player

  def initialize
    @health = 20  
    @dir = :forward
    @rescued = 0
  end

  def play_turn(warrior)
  	puts "rescatados: #{@rescued}"
  	puts "#{warrior.look}"

  	#si topamos con pared, cambiamos direccion
  	if warrior.feel.wall?
  		warrior.pivot!(:left)
  	#si encuentra un cautivo lo rescata
 	elsif warrior.feel(@dir).captive? 
    	warrior.rescue!(@dir)
    	#sumamos los rescatados y cambiamos la direccion hacia adelante
    	@rescued += 1
    	@dir = :forward
  	elsif
    	#sino somos atacados y estamos dañado, se recupera la sangre
    	if !isAttacked(warrior) and warrior.health < 20
    		warrior.rest!

    	# si encuentra a un mago un espacio alfrente lanza una flecha
  		elsif warrior.look[1].to_s() == "Wizard"
  			warrior.shoot!(@dir)
  		else
			warrior.walk!(@dir)
		end
   
    	#guardamos la sangre restante
	@health = warrior.health
    end
  end

  #metodo para saber si somos atacados
  def isAttacked(warrior)
  	warrior.health < @health
  end

end


nivel 9 ->

class Player

  def initialize
    @dir = :forward
  end

  def play_turn(warrior)
    #guardamos en un array las tresposiciones 
    array = warrior.look(@dir)
    #realizar una accion, segun lo que encuentre en el camino
    doAction(warrior,array)   
  end

  def doReverse(warrior)
    if @dir == :forward
        @dir = :backward
      else
        @dir = :forward
      end
      warrior.pivot!(@dir)
  end

  def doAction(warrior, array)
     #arbol de desiciones
    case array[0].to_s()
    when "nothing"
      case array[1].to_s()
      when "nothing"
        case array[2].to_s()
        when "Wizard", "Archer" 
          warrior.shoot!(@dir)
        else
          warrior.walk!(@dir) 
        end
      when "Wizard"
        warrior.shoot!(@dir)
      else
        warrior.walk!(@dir) 
      end
    when "Thick Sludge", "Sludge", "Archer" 
      warrior.attack!(@dir)
    when "Captive"
      warrior.rescue!(@dir)
    when "wall"
      doReverse(warrior)
    end
  end

end


EPIC MODE ->

class Player

  def initialize
    @dir = :forward
    @flag = false
  end

  def play_turn(warrior)
    puts "#{warrior.health}"
    #guardamos en un array las tresposiciones 
    array = warrior.look(@dir)
    arrayBack = warrior.look(:backward)


    #checamos si ahi un arquero lejos atacando mision 9
    if arrayBack[2].to_s() == "Archer"
      warrior.shoot!(:backward)
    #checamos si hay un cautivo atras mision 6  
    elsif arrayBack[1].to_s() == "Captive" or arrayBack[0].to_s() == "Captive"
      if warrior.feel(:backward).captive?
        warrior.rescue!(:backward)
      else
        warrior.walk!(:backward)
      end
    else
      
      #si la sangre es menor a 8 activamos la bandera
      if warrior.health <= 8
        @flag = true
      end

      if @flag
        doLive(warrior, array)
        if warrior.health >= 20
          @flag = false
        end
      else
        #realizar una accion, segun lo que encuentre en el camino
        doAction(warrior,array)   
      end  
    end
 
  end

  def checkCaptive(array)
    #Captive
  end

  def doLive(warrior, array)
     #arbol de desiciones
    case array[0].to_s()
    when "nothing"
      case array[1].to_s()
      when "nothing"
        case array[2].to_s()
        when "Archer"
          doBack(warrior)
        else
          warrior.rest!
        end
      when "Archer"
        doBack(warrior)
      else
        warrior.rest!
      end
    when "Archer","Thick Sludge", "Sludge","Wizard"
      doBack(warrior)
    else
      warrior.rest!
    end

  end

  def doBack(warrior)
    if @dir == :forward
      warrior.walk!(:backward)
    else
      warrior.walk!(:forward)
    end
  end

  def doReverse(warrior)
    if @dir == :forward
        @dir = :backward
      else
        @dir = :forward
      end
      warrior.pivot!(@dir)
  end

  def doAction(warrior, array)
     #arbol de desiciones
    case array[0].to_s()
    when "nothing"
      case array[1].to_s()
      when "nothing"
        case array[2].to_s()
        when "Wizard", "Archer" 
          warrior.shoot!(@dir)
        else
          warrior.walk!(@dir) 
        end
      when "Wizard"
        warrior.shoot!(@dir)
      else
        warrior.walk!(@dir) 
      end
    when "Thick Sludge", "Sludge", "Archer" 
      warrior.attack!(@dir)
    when "Captive"
      warrior.rescue!(@dir)
    when "wall"
      doReverse(warrior)
    end
  end

end





NIVEL INTERMEDIO

nivel 1 ->

class Player
  def play_turn(warrior)
    # add your code here
    puts "#{warrior.direction_of_stairs}"
    warrior.walk!(warrior.direction_of_stairs)
  end
end

nivel 2 ->
class Player
  def play_turn(warrior)
    # add your code here
    dirS = warrior.direction_of_stairs
    puts "#{dirS}"
    if warrior.feel(dirS).enemy?
      warrior.attack!(dirS)
    else
      warrior.walk!(dirS)
    end
  end
end

nivel 3 ->
class Player

  def initialize
    @flag = false
    @turn = 1
  end

  def play_turn(warrior)
    # add your code here
    dirS = warrior.direction_of_stairs
    puts "#{warrior.health}"

    if @flag
      warrior.walk!(dirS)
    else
      case @turn
      when 1
        warrior.bind!(:backward)
      when 2
        warrior.bind!(:left)
      when 3
        warrior.bind!(:forward)
      when 4,5,6
        warrior.attack!(:left)
      when 7
        warrior.rescue!(:right)
        @flag = true
      end
        
      @turn += 1  
    end
  end
end



nivel 4 ->
class Player

  def initialize
    @dir = :forward
    @flag = false
  end

  def play_turn(warrior)
    # add your code here
    array = warrior.listen
    puts "#{array}"

    if warrior.health < 5
      @flag = true
    end

    if @flag
      doLive(warrior)
    else
        #si no hay enemigos ni cautivos, buscamos la escalera
       if array.length == 0
          warrior.walk!(warrior.direction_of_stairs)
        else
          #establecemos la direccion del primer objetivo
          @dir = warrior.direction_of(array[0])
          doAction(warrior)
        end
    end

  end


  def doLive(warrior)
    case warrior.feel(@dir).to_s()
      when "Thick Sludge", "Sludge"
        doBack(warrior)
      else
        warrior.rest!
        if warrior.health > 15
          @flag = false
        end
      end 
  end


  #da un paso atras 
  def doBack(warrior)
    case @dir
    when :forward
      warrior.walk!(:backward)
    when :backward
       warrior.walk!(:forward)
    when :left
       warrior.walk!(:right)
     when :right
       warrior.walk!(:left)
     end
  end


  def doAction(warrior)
    #si encontramos enemigo cerca en nuestro camino, atacamos
    if warrior.feel(:forward).enemy?
      warrior.attack!
    else
      case warrior.feel(@dir).to_s()
      when "Captive"
        warrior.rescue!(@dir)
      when "Thick Sludge", "Sludge"
        warrior.attack!(@dir)
      else
        warrior.walk!(@dir)
      end 
    end
  end

end


nivel 5 ->

